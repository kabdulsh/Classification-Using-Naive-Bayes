setwd("~/Winter 2022/TO 414 001 WN 2022/Mar. 7th - Naive Bayes")
# read the sms data into the sms data frame
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
# examine the structure of the sms data
str(sms_raw)
# convert spam/ham to factor.
sms_raw$type <- factor(sms_raw$type)
# examine the type variable more carefully
table(sms_raw$type)
# build a corpus using the text mining (tm) package
#install.packages("tm")
library(tm)
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
# clean up the corpus using tm_map()
corpus_clean <- tm_map(sms_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
corpus_clean <- tm_map(corpus_clean, PlainTextDocument)
# create a document-term sparse matrix
sms_dtm <- DocumentTermMatrix(corpus_clean)
# creating training and test datasets
sms_raw_train <- sms_raw[1:4169, ]
sms_raw_test  <- sms_raw[4170:5559, ]
sms_dtm_train <- sms_dtm[1:4169, ]
sms_dtm_test  <- sms_dtm[4170:5559, ]
sms_corpus_train <- corpus_clean[1:4169]
sms_corpus_test  <- corpus_clean[4170:5559]
prop.table(table(sms_raw_test$type))
# check that the proportion of spam is similar
prop.table(table(sms_raw_train$type))
# word cloud visualization
#install.packages("wordcloud")
library(wordcloud)
wordcloud(sms_corpus_train, min.freq = 30, random.order = FALSE)
wordcloud(sms_corpus_train, min.freq = 30, random.order = FALSE)
warnings()
